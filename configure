#!/bin/sh
# Don't set `-e'!

# Basic environment variables
[ -z ${MAKE+x} ] && MAKE="make"
[ -z ${CXX+x} ]  && CXX="c++"

if which qtchooser >/dev/null 2>&1; then
    QTCHOOSER="$(which qtchooser 2> /dev/null)"
    [ -z ${QMAKE+x} ]    && QMAKE="$QTCHOOSER -run-tool=qmake -qt=5"
    [ -z ${LRELEASE+x} ] && LRELEASE="$QTCHOOSER -run-tool=lrelease -qt=5"
else
    [ -z ${QMAKE+x} ]    && QMAKE="$(which qmake-qt5 2>/dev/null || which qmake 2>/dev/null)"
    [ -z ${LRELEASE+x} ] && LRELEASE="$(which lrelease-qt5 2>/dev/null || which lrelease 2>/dev/null)"
fi

help() {
cat << EOF

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g. CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

  -h, --help              display this help and exit

  --prefix PREFIX,
  --prefix=PREFIX         install files in PREFIX [/usr/local]

  -d, --debug             build with debugging symbols intact

  --fail-on-missing       return exit 1 if non-optional components are missing

  --lrelease COMMAND,
  --lrelease=COMMAND      specify lrelease command [$LRELEASE]

  --qmake COMMAND,
  --qmake=COMMAND         specify qmake command [$QMAKE]
  --qmake-args ARGS       arguments to pass directly to qmake

Some influential environment variables:
  MAKE        make command
  CXX         C++ compiler
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXXFLAGS    C++ compiler flags

EOF
}

# check "toolname/description" "command" nqq_config_error
# set nqq_config_error to 1 for an error exit, otherwise leave it empty.
# examples:
# check "a Git client tool" git
# check c++ g++ 1
# check "QT5 qmake" qmake 1 "An extra failure message"
nqq_check_binary() {
    fail_message="not found!"
    [ -z ${4+x} ] || fail_message+="$4"
    printf "checking for $1... "
    t=$(basename $2)
    which $t 2>/dev/null || nqq_config_error "$fail_message" $3
}

nqq_check_library() {
    which pkg-config >/dev/null 2>&1 || return
    for l in $@; do
        printf "checking for ${l} library... "
        pkg-config --libs $l 2>/dev/null || nqq_config_error "not found!" 1
    done
}

nqq_compile_test() {
    TESTOUT="$(mktemp)"
    TESTPROG="#include <iostream>
    int main(){std::cout << \"test\n\" ;return 0;}"

    printf "checking whether c++ compiler builds test program with c++14... "
    if echo "$TESTPROG" | $CXX -xc++ -std=c++14 -o "$TESTOUT" -;then
        echo "ok"
    else
        nqq_config_error "error!" 1
    fi

    printf "checking whether compiled test program works... "
    $TESTOUT >/dev/null 2>&1 && echo "ok" || nqq_config_error "error!" 1
}

nqq_config_error() {
    printf "$1\n"
    [ "$2" -eq 1 ] && exit 1
    [ "$fail_on_missing" -eq 1 ] || exit 1
}

fail_on_missing=""
while [ $# -gt 0 ]; do
    key="$1"
    shift
    case $key in
        -h|--help) help;exit 0;;
        -d|--debug) BUILDMODE="debug"; echo "WARNING: Building in debug mode!";;
        --prefix=*) PREFIX="${key#*=}";;
        --prefix)   PREFIX="$1";shift;;
        --fail-on-missing) fail_on_missing=1;;
        --lrelease=*) LRELEASE="${key#*=}";;
        --lrelease)LRELEASE="$1";shift;;
        --qmake=*)QMAKE="${key#*=}";;
        --qmake)QMAKE="$1";shift;;
        --qmake-args)break;;
        *)echo WARNING: Unknown option "$key";;
    esac
done

nqq_check_binary "QT5 qmake" "$QMAKE" 1 "
Try running configure with '--qmake /path/to/qmake'."
nqq_check_binary lrelease "$LRELEASE" 1 "
Try running configure with '--lrelease /path/to/lrelease'."
nqq_check_binary c++ "$CXX" 1
nqq_compile_test
nqq_check_binary make "$MAKE" 1
nqq_check_binary pkg-config pkg-config
nqq_check_library uchardet 
nqq_check_library Qt5Core Qt5Gui Qt5Network Qt5WebEngine Qt5Widgets Qt5WebEngineWidgets Qt5PrintSupport Qt5Svg Qt5WebSockets Qt5WebChannel

[ -f "Makefile" ] && make distclean 2>/dev/null 1>/dev/null || true
printf "generate Makefile... "

$QMAKE PREFIX="$PREFIX" \
QMAKE_CXX="$CXX" \
QMAKE_CXXFLAGS="$CXXFLAGS $CPPFLAGS" \
QMAKE_LFLAGS="$LDFLAGS" \
LRELEASE="$LRELEASE" \
CONFIG+="$BUILDMODE" \
"$@" notepadqq.pro && echo "done" || nqq_config_error "error!" 1
